(()=>{"use strict";var e={890:(e,t,n)=>{n.d(t,{R:()=>A});var o,i=n(145),a=n(819),r=n(94),l=n(975);function s(e){let t=r.a.gl;const n=t.createShader(t.VERTEX_SHADER);t.shaderSource(n,e.vertex),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS),t.getShaderInfoLog(n);const o=t.createShader(t.FRAGMENT_SHADER);t.shaderSource(o,e.fragment),t.compileShader(o),t.getShaderParameter(o,t.COMPILE_STATUS),t.getShaderInfoLog(o);let i=t.createProgram();return t.attachShader(i,n),t.attachShader(i,o),t.linkProgram(i),t.getProgramParameter(i,t.LINK_STATUS)?i:null}let c=[{vertex:"\nprecision highp float;\nattribute vec2 a_Position;\nuniform mat4 mvp;\nuniform vec4 info;\nuniform vec4 flip;\nvarying vec2 top_uv;\nvarying vec3 vertPos;\nvoid main(){\n  top_uv = vec2(a_Position.x/info.x * flip.x + flip.y, a_Position.y/info.y * flip.z + flip.w);\n  gl_Position = mvp * vec4(a_Position.xy, info.z, 1.0);\n}\n",fragment:"\nprecision highp float;\nvarying vec2 top_uv;\nuniform sampler2D pieceTexture;\nvoid main() {\n  gl_FragColor = texture2D(pieceTexture, top_uv);\n  gl_FragColor.a = 1.0;\n}\n"},{vertex:"\nprecision highp float; \nattribute vec2 a_Position;\nuniform mat4 modelview;\nuniform mat4 projection;\nuniform vec4 info;\nuniform vec4 flip;\nvarying vec2 top_uv;\nvarying vec3 vertPos;\nvoid main(){\n  top_uv = vec2(a_Position.x/info.x * flip.x + flip.y, a_Position.y/info.y * flip.z + flip.w);\n  vec4 vertPos4 = modelview * vec4(a_Position, info.z, 1.0);\n  vertPos = vec3(vertPos4) / vertPos4.w;\n  gl_Position = projection * modelview * vec4(a_Position.xy, info.z, 1.0);\n}\n",fragment:"\nprecision highp float;\nvarying vec2 top_uv;\nvarying vec3 vertPos;\nuniform mat4 modelview;\nuniform sampler2D pieceTexture;\nuniform sampler2D normalTexture;\nuniform vec4 info;\nuniform vec4 flip;\nconst vec4 ambientColor = vec4(0.0, 0.0, 0.0, 1.0);\nconst vec4 specularColor = vec4(1.0, 1.0, 1.0, 1.0);\nconst float shininess = 20.0;\nconst vec4 lightColor = vec4(1.0, 1.0, 1.0, 1.0);\nvec3 phongBRDF(vec3 lightDir, vec3 viewDir, vec3 normal, vec3 phongDiffuseCol, vec3 phongSpecularCol, float phongShininess) {\n  vec3 color = phongDiffuseCol;\n  vec3 reflectDir = reflect(-lightDir, normal);\n  float specDot = max(dot(reflectDir, viewDir), 0.0);\n  color += pow(specDot, phongShininess) * phongSpecularCol;\n  return color;\n}\nvoid main() {\n  vec3 lightDirection = vec3(1.0, -1.0, -7.0);\n  vec4 diffuseColor = texture2D(pieceTexture, top_uv);\n  vec3 lightDir = normalize(-lightDirection);\n  vec3 viewDir = normalize(-vertPos);\n  vec4 normalColor = texture2D(normalTexture, top_uv);\n  normalColor = (normalColor * 2.0 * info.w) - (info.w);\n  vec3 fin = vec3(modelview * vec4(normalColor.rgb, 0.0));\n  vec3 n = normalize(fin);\n  vec3 luminance = ambientColor.rgb;\n  \n  float illuminance = dot(lightDir, n);\n  if(illuminance > 0.0) {\n\tvec3 brdf = phongBRDF(lightDir, viewDir, n, diffuseColor.rgb, specularColor.rgb, shininess);\n\tluminance += brdf * illuminance * lightColor.rgb;\n  }\n  gl_FragColor.rgb = luminance;\n  gl_FragColor.a = 1.0;\n}\n"},{vertex:"\nprecision highp float; \nattribute vec3 a_Position;\nuniform mat4 mvp;\nuniform vec4 info;\nvarying vec2 top_uv;\nvarying vec3 tabla_pos;\nvoid main(){\n  top_uv = vec2(a_Position.x/350.0, a_Position.y/350.0);\n  tabla_pos = a_Position;\n  gl_Position = mvp * vec4(a_Position, 1.0);\n}\n",fragment:"\nprecision highp float;\nvarying vec2 top_uv;\nvarying vec3 tabla_pos;\nuniform vec3 cameraPos;\nuniform sampler2D tablaTexture;\nuniform samplerCube cieloTexture;\nvoid main() {\n\tvec3 normal = vec3(0.0, 0.0, 1.0);\n\tvec3 I = normalize(tabla_pos - cameraPos);\n\tvec3 R = reflect(I, normal);\n\tvec3 RR = vec3(R.x,R.z,-R.y);\n\tvec4 skyColor = textureCube(cieloTexture, RR);\n\tgl_FragColor = texture2D(tablaTexture, top_uv) * 0.7 + skyColor * 0.3;\n\t//gl_FragColor = texture2D(tablaTexture, top_uv);\n}\n"},{vertex:"\n  attribute vec2 a_Position;\n  uniform mat4 model;\n  uniform mat4 vp;\n  uniform vec4 info;\n  void main(){\n\tvec4 purePosition = model * vec4(a_Position.xy, info.z, 1.0);\n\tvec3 newpos = vec3(purePosition.x - purePosition.z * 0.7, purePosition.y - purePosition.z * 0.5, 0.0);\n\tgl_Position = vp * vec4(newpos.xyz, 1.0);\n  }\n  ",fragment:"\n  precision highp float;\n  void main() {\n\t\tgl_FragColor = vec4(0.15, 0.15, 0.15, 1.0);\n  }\n  "}];var u=n(393),h=n(67);class d{constructor(){this.shaderMaterials=new Array(a.qC.Last)}initialize(){return e=this,t=void 0,i=function*(){let e=r.a.gl;for(let t=0;t<a.qC.Last;t++)console.log("create material "+t),this.shaderMaterials[t]=new u.y(e,o[t],h.F[t])},new((n=void 0)||(n=Promise))((function(o,a){function r(e){try{s(i.next(e))}catch(e){a(e)}}function l(e){try{s(i.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,l)}s((i=i.apply(e,t||[])).next())}));var e,t,n,i}}var m=n(685);function v(){var e=new m.WT(4);return m.WT!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e}function p(e,t,n,o){var i=new m.WT(4);return i[0]=e,i[1]=t,i[2]=n,i[3]=o,i}v();var f=n(160);function g(e,t){return n=this,o=void 0,a=function*(){console.log("loadTexture url "+t);const n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);const o=e.RGBA,i=e.RGBA,a=e.UNSIGNED_BYTE,r=new Uint8Array([0,0,255,255]);e.texImage2D(e.TEXTURE_2D,0,o,1,1,0,i,a,r);const l=new Image;return l.crossOrigin="Anonymous",l.src=t,yield l.decode(),e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,o,i,a,l),w(l.width)&&w(l.height)?e.generateMipmap(e.TEXTURE_2D):(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR)),n},new((i=void 0)||(i=Promise))((function(e,t){function r(e){try{s(a.next(e))}catch(e){t(e)}}function l(e){try{s(a.throw(e))}catch(e){t(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(r,l)}s((a=a.apply(n,o||[])).next())}));var n,o,i,a}function w(e){return 0==(e&e-1)}var T=function(e,t,n,o){return new(n||(n=Promise))((function(i,a){function r(e){try{s(o.next(e))}catch(e){a(e)}}function l(e){try{s(o.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,l)}s((o=o.apply(e,t||[])).next())}))};class P{constructor(){this.uniformWhtx=p(1,1,1e4,-1),this.uniformCameraPos=v(),this.texturesDir="data/tabla/",this.texturesNames=["tilesColor"],this.cubeMapNames=["posx","negx","posy","negy","posz","negz"],this.tablaIndex=2,this.matMVP=l.Ue()}initializeGl(e){return T(this,void 0,void 0,(function*(){yield this.loadTexturesGl(),yield this.loadCieloGl("data/cielo/Beach/")}))}initializeGeometryGl(e){return T(this,void 0,void 0,(function*(){this.verticesGl=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.verticesGl),e.bufferData(e.ARRAY_BUFFER,this.positions,e.STATIC_DRAW),this.indicesGl=e.createBuffer(),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indicesGl),e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indices,e.STATIC_DRAW)}))}initializeGeometry(e,t){return T(this,void 0,void 0,(function*(){this.width=e,this.height=t,console.log("initializeGeometry width "+e),console.log("initializeGeometry height "+t),this.uniformWhtx=p(e,t,1e4,-1);let n=[-e/2,t/2,0,e/2,t/2,0,-e/2,-t/2,0,e/2,-t/2,0];this.positions=new Float32Array(n),this.indices=new Uint16Array([0,1,2,2,1,3]),yield this.initializeGeometryGl(r.a.gl)}))}initialize(){return T(this,void 0,void 0,(function*(){yield this.initializeGl(r.a.gl)}))}loadCieloGl(e){return T(this,void 0,void 0,(function*(){let t=r.a.gl;this.cieloTextureGl=t.createTexture(),t.bindTexture(t.TEXTURE_CUBE_MAP,this.cieloTextureGl);const n=t.RGBA,o=t.RGBA,i=t.UNSIGNED_BYTE;t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE);for(let a=0;a<6;a++){let r=e+this.cubeMapNames[a]+".jpg";const l=new Image;l.src=r,yield l.decode(),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+a,0,n,o,i,l)}}))}loadTexturesGl(){return T(this,void 0,void 0,(function*(){this.texturesGl=new Array(this.texturesNames.length);let e=0;for(let t of this.texturesNames){let n=this.texturesDir+t+".jpg",o=yield g(r.a.gl,n);this.texturesGl[e]=o,e++}}))}setTablaIndex(e){let t=0;for(let n of this.texturesNames){if(e==n)return void(this.tablaIndex=t);t++}}renderGl(){return T(this,void 0,void 0,(function*(){this.updateMatrix();let e=r.a.gl;e.useProgram(r.a.g.shaderMaterials[a.qC.Tabla].program),e.bindBuffer(e.ARRAY_BUFFER,this.verticesGl),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indicesGl),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,this.texturesGl[this.tablaIndex]),e.uniform1i(r.a.g.shaderMaterials[a.qC.Tabla].uniforms.descs[a.Js.PieceTexture].location,0),e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_CUBE_MAP,this.cieloTextureGl),e.uniform1i(r.a.g.shaderMaterials[a.qC.Tabla].uniforms.descs[a.Js.NormalTexture].location,1),e.uniform4fv(r.a.g.shaderMaterials[a.qC.Tabla].uniforms.descs[a.Js.Info].location,this.uniformWhtx),e.uniformMatrix4fv(r.a.g.shaderMaterials[a.qC.Tabla].uniforms.descs[a.Js.Mvp].location,!1,this.matMVP),e.uniform3fv(r.a.g.shaderMaterials[a.qC.Tabla].uniforms.descs[a.Js.Flip].location,f.al(r.a.cameraX,r.a.cameraY,r.a.cameraZ));var t=e.getAttribLocation(r.a.g.shaderMaterials[a.qC.Tabla].program,"a_Position");e.vertexAttribPointer(t,3,e.FLOAT,!1,12,0),e.enableVertexAttribArray(t),e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)}))}cycleTexture(){this.tablaIndex++,this.tablaIndex>=this.texturesNames.length&&(this.tablaIndex=0)}updateMatrix(){l.Jp(this.matMVP,r.a.matProjection,r.a.matView)}}class E{constructor(e){let t=this;this.a=e,window.addEventListener("keydown",(e=>{this.onKeydownEvent(e)})),window.addEventListener("keyup",(e=>{this.onKeyupEvent(e)})),window.addEventListener("mousedown",(function(e){t.onMouseEvent(e),e.preventDefault()}),!1),window.addEventListener("mouseup",(function(e){e.offsetX,e.offsetY,t.onMouseEvent(e)})),window.addEventListener("mousemove",(e=>{e.offsetX,e.offsetY,t.onMouseEvent(e)}))}onMouseLeftDown(e,t){this.a.p.handleClick(e,t)}onMouseRightDown(e,t,n){}onMouseMiddleDown(e,t){console.log("onMouseMiddleDown")}onMouseMove(e,t){}onMouseLeftUp(e,t){this.a.p.handleClickRelease(e,t)}onMouseEvent(e){if(window.inPuzzleButton)return;if(!this.a.p)return;if(this.a.p.mouseIsOut&&(e.offsetX||e.offsetY))return console.log("mouseover ---------------------------------buttons: "+e.buttons),this.a.p.mouseIsOut=!1,void(1&e.buttons||this.a.p.handleClickRelease(e.offsetX,e.offsetY));if(!e.offsetX&&!e.offsetY)return console.log("mouseout ---------------------------------buttons: "+e.buttons),void(this.a.p.mouseIsOut=!0);let t=e.offsetX,n=e.offsetY;"mousedown"==e.type?0==e.button?this.onMouseLeftDown(t,n):1==e.button?this.onMouseMiddleDown(t,n):2==e.button&&this.onMouseRightDown(t,n,e):"mousemove"==e.type?this.onMouseMove(t,n):"mouseup"==e.type&&0==e.button&&this.onMouseLeftUp(t,n)}onKeydownEvent(e){let t=-1,n=null;e.keyCode>=48&&e.keyCode<=57?e.keyCode:e.keyCode>=64&&e.keyCode<=90&&e.key,this.a.p&&(console.log("got evt.code "+e.code),"ArrowUp"==e.code?this.a.p.onAction(!0,a.aR.ArrowUp):"ArrowDown"==e.code?this.a.p.onAction(!0,a.aR.ArrowDown):"ArrowLeft"==e.code?this.a.p.onAction(!0,a.aR.ArrowLeft):"ArrowRight"==e.code?this.a.p.onAction(!0,a.aR.ArrowRight):"KeyI"==e.code?this.a.p.onAction(!0,a.aR.ZoomIn):"KeyO"==e.code&&this.a.p.onAction(!0,a.aR.ZoomOut))}onKeyupEvent(e){let t=-1,n=null;e.keyCode>=48&&e.keyCode<=57?e.keyCode:e.keyCode>=64&&e.keyCode<=90&&e.key,this.a.p&&("ArrowUp"==e.code?this.a.p.onAction(!1,a.aR.ArrowUp):"ArrowDown"==e.code?this.a.p.onAction(!1,a.aR.ArrowDown):"ArrowLeft"==e.code?this.a.p.onAction(!1,a.aR.ArrowLeft):"ArrowRight"==e.code?this.a.p.onAction(!1,a.aR.ArrowRight):"KeyI"==e.code?this.a.p.onAction(!1,a.aR.ZoomIn):"KeyO"==e.code&&this.a.p.onAction(!1,a.aR.ZoomOut))}}var _=function(e,t,n,o){return new(n||(n=Promise))((function(i,a){function r(e){try{s(o.next(e))}catch(e){a(e)}}function l(e){try{s(o.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,l)}s((o=o.apply(e,t||[])).next())}))};class A{constructor(e){r.a.canvas=e,e.width=window.innerWidth,e.height=window.innerHeight,console.log("Use WebGL"),r.a.gl=e.getContext("webgl"),r.a.gl?(this.initializeWebGl(r.a.gl),r.a.matView=l.Ue(),r.a.matProjection=l.Ue(),r.a.matNormal=l.Ue(),r.a.matViewProjection=l.Ue(),this.initialized=!0,this.mousekey=new E(this)):console.log("Failed to get the rendering context for WebGL")}handleDownEvent(e){"pan_left"==e?this.p.onAction(!0,a.aR.ArrowLeft):"pan_right"==e?this.p.onAction(!0,a.aR.ArrowRight):"pan_up"==e?this.p.onAction(!0,a.aR.ArrowUp):"pan_down"==e?this.p.onAction(!0,a.aR.ArrowDown):"zoom_in"==e?this.p.onAction(!0,a.aR.ZoomIn):"zoom_out"==e&&this.p.onAction(!0,a.aR.ZoomOut)}handleUpEvent(e){"pan_left"==e?this.p.onAction(!1,a.aR.ArrowLeft):"pan_right"==e?this.p.onAction(!1,a.aR.ArrowRight):"pan_up"==e?this.p.onAction(!1,a.aR.ArrowUp):"pan_down"==e?this.p.onAction(!1,a.aR.ArrowDown):"zoom_in"==e?this.p.onAction(!1,a.aR.ZoomIn):"zoom_out"==e&&this.p.onAction(!1,a.aR.ZoomOut)}appMouseDown(e,t){console.log("appMouseDown: "+t),this.handleDownEvent(t)}appMouseUp(e,t){console.log("appMouseUp: "+t),this.handleUpEvent(t)}appMouseOut(e,t){console.log("appMouseOut: "+t),this.handleUpEvent(t)}appTouchCancel(e,t){console.log("appTouchCancel: "+t),this.handleUpEvent(t)}appTouchEnd(e,t){console.log("appTouchEnd: "+t),this.handleUpEvent(t)}appTouchStart(e,t){console.log("appTouchStart: "+t),this.handleDownEvent(t)}readS3File(e,t){return _(this,void 0,void 0,(function*(){console.log(`readS3File bucket ${e}, name ${t}`);const n={method:"POST",credential:"include",mode:"cors",headers:{"Access-Control-Allow-Origin":"http://192.168.0.14","content-type":"application/json"},body:JSON.stringify({bucket:e,name:t})};let o=yield fetch("http://192.168.0.14:3006/api/v1/image/asset",n);console.log("response: "),console.log(o)}))}loadPuzzle(e){return _(this,void 0,void 0,(function*(){console.log("loadPuzzle "+e),yield this.initPuzzle()}))}loadId(e){if(console.log("loadId: "+e),this.p){let e=this.p;this.p=null,e.release(),e=null}this.loadPuzzle(e)}initializeWebGl(e){return _(this,void 0,void 0,(function*(){e.clearColor(0,0,0,1),e.clearDepth(1),e.clearStencil(0),e.enable(e.DEPTH_TEST),e.frontFace(e.CW),e.cullFace(e.BACK),e.enable(e.CULL_FACE),function(){o=new Array(a.qC.Last);for(let e=0;e<a.qC.Last;e++)o[e]=s(c[e])}();var t=e.getExtension("OES_element_index_uint");console.log("ext = "+t),r.a.tabla=new P,yield r.a.tabla.initialize(),r.a.g=new d,yield r.a.g.initialize();let n=window.puzzleId;this.loadId(n)}))}renderGl(){r.a.gl.clear(r.a.gl.COLOR_BUFFER_BIT|r.a.gl.DEPTH_BUFFER_BIT),this.p&&this.p.renderGl()}render(){this.initialized&&r.a.gl&&this.renderGl()}initPuzzle(){return _(this,void 0,void 0,(function*(){let e=new i.r;yield e.initialize(),this.p=e}))}readTextFile(e,t){var n=new XMLHttpRequest;n.overrideMimeType("application/json"),n.open("GET",e,!0),n.onreadystatechange=function(){4==n.readyState&&200==n.status&&t(n.responseText)},n.send(null)}}},552:(e,t,n)=>{n.d(t,{O:()=>r});var o=n(94),i=n(160),a=n(975);class r{constructor(e,t,n){this.position=i.Ue(),this.gpuAdjust=a.al(1,0,0,0,0,1,0,0,0,0,.5,0,0,0,.5,1),this.near=3,this.far=6e3,o.a.cameraX=e,o.a.cameraY=t,o.a.cameraZ=n,this.fovx=60*Math.PI/180,this.update(),o.a.lightDirection=i.al(0,0,-1)}release(){this.position=null,this.gpuAdjust=null}update(){let e=o.a.canvas.width/o.a.canvas.height;o.a.worldWidth=1*o.a.cameraZ/.886,o.a.worldHeight=o.a.worldWidth/e,a.G3(o.a.matProjection,this.fovx/e,e,this.near,this.far),a.Jp(o.a.matProjection,this.gpuAdjust,o.a.matProjection);let t=a.Ue();a.aC(t,0);let n=a.Ue();a.Iu(n,n,i.al(o.a.cameraX,o.a.cameraY,o.a.cameraZ)),a.Jp(n,n,t),a.U_(o.a.matView,n),a.Jp(o.a.matViewProjection,o.a.matProjection,o.a.matView)}}},467:(e,t,n)=>{var o=n(94),i=n(890);let a;document.getElementById("myElement"),a=new i.R(document.querySelector("#bancan")),window.pzlapp=a,window.addEventListener("resize",(function(){var e=document.querySelector("#bancan");e.width=window.innerWidth,e.height=window.innerHeight;const t=e.getBoundingClientRect();o.a.gl&&o.a.gl.viewport(0,0,t.width,t.height),o.a.pcamera&&o.a.pcamera.update()}),!1),window.addEventListener("contextmenu",(function(e){e.preventDefault()}),!1);var r=function(){a.render(),requestAnimationFrame(r)};r()},915:(e,t,n)=>{n(94),n(819)},819:(e,t,n)=>{var o,i,a,r,l,s,c;n.d(t,{qC:()=>o,Js:()=>i,aR:()=>s}),function(e){e[e.Basic=0]="Basic",e[e.Phong=1]="Phong",e[e.Tabla=2]="Tabla",e[e.Top=3]="Top",e[e.Last=4]="Last"}(o||(o={})),function(e){e[e.Info=0]="Info",e[e.Mv=1]="Mv",e[e.Mvp=2]="Mvp",e[e.PieceTexture=3]="PieceTexture",e[e.Projection=4]="Projection",e[e.NormalTexture=5]="NormalTexture",e[e.Flip=6]="Flip",e[e.Color=7]="Color",e[e.ColorSat=8]="ColorSat"}(i||(i={})),function(e){e.Basic="basic",e.Dem="dem",e.Multi="multi",e.Phong="phong"}(a||(a={})),function(e){e.None="none",e.Add="add",e.Sub="sub"}(r||(r={})),function(e){e[e.None=0]="None",e[e.X=1]="X",e[e.Y=2]="Y",e[e.Both=3]="Both"}(l||(l={})),function(e){e.ArrowLeft="left",e.ArrowRight="right",e.ArrowUp="up",e.ArrowDown="down",e.ZoomIn="in",e.ZoomOut="out"}(s||(s={})),function(e){e[e.left=1]="left",e[e.right=2]="right",e[e.top=4]="top",e[e.bottom=8]="bottom"}(c||(c={}))},94:(e,t,n)=>{n.d(t,{a:()=>o});let o={useMsaa:!0,g:null,sideTextureIndex:2,canvas:null,theta:Math.PI/2,tabla:null,npolys:0,minCellDim:0,cellsX:0,cellsY:0,dimX:0,dimY:0,thickness:12,sideTextureScale:48,bottomZ:6,ceilingZ:18,bounceZ:30,panMillis:500,panCoeff:.25,panCoeffX:0,panCoeffY:0,placingGroupId:-1,pcamera:null,cameraX:0,cameraY:0,cameraZ:0,worldWidth:0,worldHeight:0,gl:null,matView:null,matProjection:null,matViewProjection:null,matNormal:null,lightDirection:null,updateMc:!1,tapDuration:250,isTouch:!1,oldGlBuffers:[],countdown:0}},393:(e,t,n)=>{n.d(t,{y:()=>o});class o{constructor(e,t,n){this.uniforms=n,this.program=t;for(let t of this.uniforms.descs)t.name&&(t.location=e.getUniformLocation(this.program,t.name),t.location||console.log("Failed to get the storage location of "+t.name))}}},262:(e,t,n)=>{n(94)},145:(e,t,n)=>{n.d(t,{r:()=>l});var o=n(819),i=n(94),a=n(552),r=function(e,t,n,o){return new(n||(n=Promise))((function(i,a){function r(e){try{s(o.next(e))}catch(e){a(e)}}function l(e){try{s(o.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,l)}s((o=o.apply(e,t||[])).next())}))};class l{constructor(){this.actions=new Array,this.selectedGroupId=-1,i.a.placingGroupId=-1,this.lastUpdateTime=Date.now(),this.velPanX=0,this.velPanY=0,this.velZoom=0,this.inDrag=!1,this.mouseIsOut=!0,this.iter=0,this.lastTime=0}onAction(e,t){if(e){console.log("add action "+t);let e={id:t,timestamp:Date.now(),acceleration:0,velocity:0};this.actions.push(e)}else console.log("remove action "+t),this.actions=this.actions.filter((function(e,n,o){return e.id==t&&(Date.now(),e.timestamp),e.id!=t}))}handleClickRelease(e,t){}handleClick(e,t){}deselectGroup(e){return r(this,void 0,void 0,(function*(){}))}updateActions(e){const t=.5;let n=0,a=0,r=0;if(this.actions.length)for(let i of this.actions)switch(i.id){case o.aR.ArrowLeft:n=-2.5*e/1500,this.velPanX+=n,this.velPanX<-.5&&(this.velPanX=-.5);break;case o.aR.ArrowRight:n=2.5*e/1500,this.velPanX+=n,this.velPanX>t&&(this.velPanX=t);break;case o.aR.ArrowDown:a=2.5*e/1500,this.velPanY+=a,this.velPanY>t&&(this.velPanY=t);break;case o.aR.ArrowUp:a=-2.5*e/1500,this.velPanY+=a,this.velPanY<-.5&&(this.velPanY=-.5);break;case o.aR.ZoomIn:r=-2.5*e/1e3,this.velZoom+=r,this.velZoom<-.5&&(this.velZoom=-.5);break;case o.aR.ZoomOut:r=2.5*e/1e3,this.velZoom+=r,this.velZoom>t&&(this.velZoom=t)}if(this.inSwipe){let e=8;i.a.cameraX+=(this.swipePanInfo.cameraDestX-i.a.cameraX)/e,i.a.cameraY+=(this.swipePanInfo.cameraDestY-i.a.cameraY)/e,i.a.pcamera.update()}else 0==n&&0!=this.velPanX&&(n=5*e/1e3,this.velPanX>0?(this.velPanX-=n,this.velPanX<0&&(this.velPanX=0)):(this.velPanX+=n,this.velPanX>0&&(this.velPanX=0))),0==a&&0!=this.velPanY&&(a=5*e/1e3,this.velPanY>0?(this.velPanY-=a,this.velPanY<0&&(this.velPanY=0)):(this.velPanY+=a,this.velPanY>0&&(this.velPanY=0)));if(0==r&&0!=this.velZoom&&(r=5*e/1e3,this.velZoom>0?(this.velZoom-=r,this.velZoom<0&&(this.velZoom=0)):(this.velZoom+=r,this.velZoom>0&&(this.velZoom=0))),this.velPanX||this.velPanY){let t=i.a.worldWidth>i.a.worldHeight?i.a.worldWidth:i.a.worldHeight,n=this.velPanX*e/1e3*t,o=this.velPanY*e/1e3*t;i.a.cameraX+=n,i.a.cameraY-=o,i.a.pcamera.update()}if(this.velZoom){let t=this.velZoom*e/1e3;this.zoomLogarithm+=t,i.a.cameraZ=Math.exp(this.zoomLogarithm),i.a.pcamera.update()}}clampCamera(){i.a.cameraX<-i.a.tabla.width/2&&(i.a.cameraX=-i.a.tabla.width/2),i.a.cameraX>i.a.tabla.width/2&&(i.a.cameraX=i.a.tabla.width/2),i.a.cameraY<-i.a.tabla.height/2&&(i.a.cameraY=-i.a.tabla.height/2),i.a.cameraY>i.a.tabla.height/2&&(i.a.cameraY=i.a.tabla.height/2)}update(){i.a.theta-=.01;let e=Date.now(),t=e-this.lastUpdateTime;if(this.lastUpdateTime=e,i.a.countdown&&(i.a.countdown--,!i.a.countdown&&i.a.oldGlBuffers.length)){for(let e of i.a.oldGlBuffers)console.log("delete a buffer---------------------"),i.a.gl.deleteBuffer(e);i.a.oldGlBuffers=[]}this.updateActions(t),this.clampCamera(),i.a.pcamera.update()}initialize(){return r(this,void 0,void 0,(function*(){i.a.cameraX=0,i.a.cameraY=0,i.a.cameraZ=1200,i.a.pcamera=new a.O(i.a.cameraX,i.a.cameraY,i.a.cameraZ),this.zoomLogarithm=Math.log(i.a.cameraZ),yield i.a.tabla.initializeGeometry(1024,1024),i.a.tabla.setTablaIndex("tilesColor"),yield this.initializeGl(i.a.gl)}))}initializeGl(e){return r(this,void 0,void 0,(function*(){this.gl=e}))}renderGl(){if(this.iter++,this.iter%60==0){let e=Date.now();this.lastTime,this.lastTime=e}this.update(),i.a.tabla&&i.a.tabla.renderGl()}release(){}}},67:(e,t,n)=>{n.d(t,{F:()=>o});const o=[{descs:[{name:"info",location:null},{name:null,location:null},{name:"mvp",location:null},{name:"pieceTexture",location:null},{name:null,location:null},{name:null,location:null},{name:"flip",location:null},{name:null,location:null}]},{descs:[{name:"info",location:null},{name:"modelview",location:null},{name:null,location:null},{name:"pieceTexture",location:null},{name:"projection",location:null},{name:"normalTexture",location:null},{name:"flip",location:null},{name:null,location:null}]},{descs:[{name:"info",location:null},{name:null,location:null},{name:"mvp",location:null},{name:"tablaTexture",location:null},{name:null,location:null},{name:"cieloTexture",location:null},{name:"cameraPos",location:null},{name:null,location:null}]},{descs:[{name:"info",location:null},{name:"vp",location:null},{name:null,location:null},{name:null,location:null},{name:"model",location:null},{name:null,location:null},{name:null,location:null},{name:null,location:null}]}]},313:(e,t,n)=>{n(819),n(94)},685:(e,t,n)=>{n.d(t,{WT:()=>o});var o="undefined"!=typeof Float32Array?Float32Array:Array;Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)})},975:(e,t,n)=>{n.d(t,{Ue:()=>i,al:()=>a,U_:()=>r,Jp:()=>l,Iu:()=>s,aC:()=>c,G3:()=>u});var o=n(685);function i(){var e=new o.WT(16);return o.WT!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function a(e,t,n,i,a,r,l,s,c,u,h,d,m,v,p,f){var g=new o.WT(16);return g[0]=e,g[1]=t,g[2]=n,g[3]=i,g[4]=a,g[5]=r,g[6]=l,g[7]=s,g[8]=c,g[9]=u,g[10]=h,g[11]=d,g[12]=m,g[13]=v,g[14]=p,g[15]=f,g}function r(e,t){var n=t[0],o=t[1],i=t[2],a=t[3],r=t[4],l=t[5],s=t[6],c=t[7],u=t[8],h=t[9],d=t[10],m=t[11],v=t[12],p=t[13],f=t[14],g=t[15],w=n*l-o*r,T=n*s-i*r,P=n*c-a*r,E=o*s-i*l,_=o*c-a*l,A=i*c-a*s,x=u*p-h*v,R=u*f-d*v,y=u*g-m*v,b=h*f-d*p,C=h*g-m*p,D=d*g-m*f,M=w*D-T*C+P*b+E*y-_*R+A*x;return M?(M=1/M,e[0]=(l*D-s*C+c*b)*M,e[1]=(i*C-o*D-a*b)*M,e[2]=(p*A-f*_+g*E)*M,e[3]=(d*_-h*A-m*E)*M,e[4]=(s*y-r*D-c*R)*M,e[5]=(n*D-i*y+a*R)*M,e[6]=(f*P-v*A-g*T)*M,e[7]=(u*A-d*P+m*T)*M,e[8]=(r*C-l*y+c*x)*M,e[9]=(o*y-n*C-a*x)*M,e[10]=(v*_-p*P+g*w)*M,e[11]=(h*P-u*_-m*w)*M,e[12]=(l*R-r*b-s*x)*M,e[13]=(n*b-o*R+i*x)*M,e[14]=(p*T-v*E-f*w)*M,e[15]=(u*E-h*T+d*w)*M,e):null}function l(e,t,n){var o=t[0],i=t[1],a=t[2],r=t[3],l=t[4],s=t[5],c=t[6],u=t[7],h=t[8],d=t[9],m=t[10],v=t[11],p=t[12],f=t[13],g=t[14],w=t[15],T=n[0],P=n[1],E=n[2],_=n[3];return e[0]=T*o+P*l+E*h+_*p,e[1]=T*i+P*s+E*d+_*f,e[2]=T*a+P*c+E*m+_*g,e[3]=T*r+P*u+E*v+_*w,T=n[4],P=n[5],E=n[6],_=n[7],e[4]=T*o+P*l+E*h+_*p,e[5]=T*i+P*s+E*d+_*f,e[6]=T*a+P*c+E*m+_*g,e[7]=T*r+P*u+E*v+_*w,T=n[8],P=n[9],E=n[10],_=n[11],e[8]=T*o+P*l+E*h+_*p,e[9]=T*i+P*s+E*d+_*f,e[10]=T*a+P*c+E*m+_*g,e[11]=T*r+P*u+E*v+_*w,T=n[12],P=n[13],E=n[14],_=n[15],e[12]=T*o+P*l+E*h+_*p,e[13]=T*i+P*s+E*d+_*f,e[14]=T*a+P*c+E*m+_*g,e[15]=T*r+P*u+E*v+_*w,e}function s(e,t,n){var o,i,a,r,l,s,c,u,h,d,m,v,p=n[0],f=n[1],g=n[2];return t===e?(e[12]=t[0]*p+t[4]*f+t[8]*g+t[12],e[13]=t[1]*p+t[5]*f+t[9]*g+t[13],e[14]=t[2]*p+t[6]*f+t[10]*g+t[14],e[15]=t[3]*p+t[7]*f+t[11]*g+t[15]):(o=t[0],i=t[1],a=t[2],r=t[3],l=t[4],s=t[5],c=t[6],u=t[7],h=t[8],d=t[9],m=t[10],v=t[11],e[0]=o,e[1]=i,e[2]=a,e[3]=r,e[4]=l,e[5]=s,e[6]=c,e[7]=u,e[8]=h,e[9]=d,e[10]=m,e[11]=v,e[12]=o*p+l*f+h*g+t[12],e[13]=i*p+s*f+d*g+t[13],e[14]=a*p+c*f+m*g+t[14],e[15]=r*p+u*f+v*g+t[15]),e}function c(e,t){var n=Math.sin(t),o=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}var u=function(e,t,n,o,i){var a,r=1/Math.tan(t/2);return e[0]=r/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=i&&i!==1/0?(a=1/(o-i),e[10]=(i+o)*a,e[14]=2*i*o*a):(e[10]=-1,e[14]=-2*o),e}},160:(e,t,n)=>{n.d(t,{Ue:()=>i,al:()=>a});var o=n(685);function i(){var e=new o.WT(3);return o.WT!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function a(e,t,n){var i=new o.WT(3);return i[0]=e,i[1]=t,i[2]=n,i}i()}},t={};function n(o){var i=t[o];if(void 0!==i)return i.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,n),a.exports}n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n(890),n(552),n(467),n(915),n(819),n(94),n(393),n(262),n(145),n(67),n(313)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,